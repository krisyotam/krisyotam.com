# Darkmode CSS Investigation Agenda

## CSS Files Investigation
- [x] Check global CSS files in styles directory
  - Found darkmode variables in styles/globals.css
  - Found another globals.css in app directory with darkmode CSS variables
- [x] Examine CSS modules or styling in app directory
  - Found app/globals.css with extensive styling including darkmode variables
  - Found app/blog/posts.css with blog post styling including darkmode selectors
  - Found app/now/now-page.css with now page styling including darkmode selectors
- [x] Review Tailwind configuration for darkmode settings
  - Verified darkMode: ["class"] in tailwind.config.js
- [x] Inspect theme configuration and context providers
  - Found two theme providers:
    1. contexts/theme-context.tsx (not being used)
    2. components/theme-provider.tsx (used in layout)
  - Layout uses next-themes ThemeProvider

## Page-Specific Investigation
- [x] Blog post pages darkmode styling
  - Blog has extensive styling in posts.css with dark mode selectors
  - Blog layout uses ThemeProvider
- [x] Notes pages darkmode styling
  - Similar pattern to blog pages
- [x] MDX pages darkmode styling (now page, wants pages)
  - Now page uses now-page.css with dark mode selectors
  - Blog and notes are MDX-based pages

## Identified Issues
- [x] Theme toggle mechanism via command-menu and settings-menu
  - Uses next-themes to toggle between light/dark
  - Command menu has proper toggle with proper localStorage usage
- [x] Hard-coded dark selectors not using Tailwind syntax
  - Many `.dark` selectors in CSS, but not using Tailwind's classes
  - CSS specificity battles may be occurring
- [x] Theme application inconsistency between client and server rendering
  - ThemeProvider in layout.tsx uses "system" as default, could be inconsistent with CSS
- [x] Theme persistence via localStorage may not be working in production
  - next-themes requires client-side hydration to work correctly

## Solutions Implemented
- [x] Unify CSS approach: Ensure all hard-coded .dark selectors follow the same pattern
  - Updated app/blog/posts.css to use :is(.dark) consistently
  - Now page CSS already uses correct selectors
- [x] Fix ThemeProvider initialization:
  - Updated app/layout.tsx to add className="light" to html element
  - Added proper storageKey to ThemeProvider
  - Added disableTransitionOnChange to prevent flicker
- [x] Add script for early theme detection:
  - Created components/dark-mode-script.tsx for early theme detection
  - Script runs before React hydration to set theme class properly
- [x] Improve theme persistence:
  - Added localStorage check and system preference detection in script
  - Script handles changes to system preference dynamically
- [x] Verify darkmode media query handling:
  - Added theme-color meta tags for browser UI
  - Added data-prefers-dark attribute to track system preference
